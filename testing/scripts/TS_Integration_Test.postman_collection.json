{
	"info": {
		"_postman_id": "c8e90e01-0e4a-42f3-863a-a5e8be710106",
		"name": "TS Integration Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36032264"
	},
	"item": [
		{
			"name": "Integration Tests",
			"item": [
				{
					"name": "getOrgByUUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"returns right org\", function() {",
									"    pm.expect(pm.response.json()).to.eql(",
									"    {",
									"    \"organizationName\": \"Audacious Test Organization 1\",",
									"    \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353af\",",
									"    \"active\": true",
									"    }   ",
									"    );",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/organizations/0d15449b-fb08-4013-8985-20c148b353af",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"organizations",
								"0d15449b-fb08-4013-8985-20c148b353af"
							]
						},
						"description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
					},
					"response": []
				},
				{
					"name": "getOrgByUUIDNotExist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"returns error code\", function() {",
									"    pm.expect(pm.response.code = 404);",
									"});    "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/organizations/1d15449b-fb08-4013-8985-20c148b353aa",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"organizations",
								"1d15449b-fb08-4013-8985-20c148b353aa"
							]
						},
						"description": "This request uses the saved `token` collection variable to access a secret 'name' stored against that token.\n\nIn this request, we used the `token` collection variable as a query param to fetch the name generated for that token. We have added a test to check that a name is correctly returned."
					},
					"response": []
				},
				{
					"name": "getOrgList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"returns org list\", function() {",
									"    pm.expect(pm.response.json()).to.eql(",
									"    {",
									"    \"data\": [",
									"        {",
									"            \"organizationName\": \"Audacious Test Organization 1\",",
									"            \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353af\",",
									"            \"active\": true",
									"        },",
									"        {",
									"            \"organizationName\": \"Audacious Test Organization 2\",",
									"            \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353be\",",
									"            \"active\": true",
									"        },",
									"        {",
									"            \"organizationName\": \"Audacious Test Organization 3\",",
									"            \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353cc\",",
									"            \"active\": true",
									"        },",
									"        {",
									"            \"organizationName\": \"Audacious Test Organization 4\",",
									"            \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353cb\",",
									"            \"active\": true",
									"        },",
									"        {",
									"            \"organizationName\": \"Audacious Test Organization 5\",",
									"            \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353ba\",",
									"            \"active\": true",
									"        }",
									"    ],",
									"    \"has_more\": \"true\"",
									"}",
									"    );",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{token}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/organizations?limit=5",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"organizations"
							],
							"query": [
								{
									"key": "limit",
									"value": "5"
								}
							]
						},
						"description": "This request un-registers a token by using the token collection variable in the POST body.\n\nWe also added a test to ensure the response has a 200 OK status code."
					},
					"response": []
				},
				{
					"name": "getOrgListLimitBelowMax",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"returns org list\", function() {\r",
									"    pm.expect(pm.response.json()).to.eql(\r",
									"    {\r",
									"    \"data\": [\r",
									"        {\r",
									"            \"organizationName\": \"Audacious Test Organization 1\",\r",
									"            \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353af\",\r",
									"            \"active\": true\r",
									"        },\r",
									"        {\r",
									"            \"organizationName\": \"Audacious Test Organization 2\",\r",
									"            \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353be\",\r",
									"            \"active\": true\r",
									"        },\r",
									"        {\r",
									"            \"organizationName\": \"Audacious Test Organization 3\",\r",
									"            \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353cc\",\r",
									"            \"active\": true\r",
									"        },\r",
									"        {\r",
									"            \"organizationName\": \"Audacious Test Organization 4\",\r",
									"            \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353cb\",\r",
									"            \"active\": true\r",
									"        },\r",
									"        {\r",
									"            \"organizationName\": \"Audacious Test Organization 5\",\r",
									"            \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353ba\",\r",
									"            \"active\": true\r",
									"        }\r",
									"    ],\r",
									"    \"has_more\": \"true\"\r",
									"}\r",
									"    );\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/organizations?limit=5&includeInactive=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"organizations"
							],
							"query": [
								{
									"key": "limit",
									"value": "5"
								},
								{
									"key": "includeInactive",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getOrgListLimitAboveMax",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"returns org list\", function() {\r",
									"    pm.expect(pm.response.json()).to.eql(\r",
									"    {\r",
									"    \"data\": [\r",
									"        {\r",
									"            \"organizationName\" : \"Audacious Test Organization 14\",\r",
									"            \"organizationId\" : \"0d15449b-fb08-4013-8985-20c148b353ac\",\r",
									"            \"active\" : true\r",
									"        }\r",
									"    ],\r",
									"    \"has_more\": \"false\"\r",
									"}\r",
									"    );\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/organizations?limit=20&nextCursor=0d15449b-fb08-4013-8985-20c148b353ad&includeInactive=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"organizations"
							],
							"query": [
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "nextCursor",
									"value": "0d15449b-fb08-4013-8985-20c148b353ad"
								},
								{
									"key": "includeInactive",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getOrgListWithStartPointExists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"returns org list\", function() {\r",
									"    pm.expect(pm.response.json()).to.eql(\r",
									"    {\r",
									"    \"data\": [\r",
									"        {\r",
									"            \"organizationName\" : \"Audacious Test Organization 5\",\r",
									"            \"organizationId\" : \"0d15449b-fb08-4013-8985-20c148b353ba\",\r",
									"            \"active\" : true\r",
									"        }, {\r",
									"            \"organizationName\" : \"Audacious Test Organization 6\",\r",
									"            \"organizationId\" : \"0d15449b-fb08-4013-8985-20c148b353cd\",\r",
									"            \"active\" : true\r",
									"        }, {\r",
									"            \"organizationName\" : \"Audacious Test Organization 7\",\r",
									"            \"organizationId\" : \"0d15449b-fb08-4013-8985-20c148b353ae\",\r",
									"            \"active\" : true\r",
									"        }, {\r",
									"            \"organizationName\" : \"Audacious Test Organization 8\",\r",
									"            \"organizationId\" : \"0d15449b-fb08-4013-8985-20c148b353ca\",\r",
									"            \"active\" : true\r",
									"        }, {\r",
									"            \"organizationName\" : \"Audacious Test Organization 9\",\r",
									"            \"organizationId\" : \"0d15449b-fb08-4013-8985-20c148b353bf\",\r",
									"            \"active\" : true\r",
									"        }\r",
									"    ],\r",
									"    \"has_more\": \"true\"\r",
									"}\r",
									"    );\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/organizations?nextCursor=0d15449b-fb08-4013-8985-20c148b353cb&limit=5",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"organizations"
							],
							"query": [
								{
									"key": "nextCursor",
									"value": "0d15449b-fb08-4013-8985-20c148b353cb"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getOrgListWithEndPointExists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"returns org list\", function() {\r",
									"    pm.expect(pm.response.json()).to.eql(\r",
									"    {\r",
									"    \"data\": [\r",
									"        {\r",
									"            \"organizationName\": \"Audacious Test Organization 4\",\r",
									"            \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353cb\",\r",
									"            \"active\": true\r",
									"        },\r",
									"        {\r",
									"            \"organizationName\": \"Audacious Test Organization 5\",\r",
									"            \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353ba\",\r",
									"            \"active\": true\r",
									"        },\r",
									"        {\r",
									"            \"organizationName\": \"Audacious Test Organization 6\",\r",
									"            \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353cd\",\r",
									"            \"active\": true\r",
									"        },\r",
									"        {\r",
									"            \"organizationName\": \"Audacious Test Organization 7\",\r",
									"            \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353ae\",\r",
									"            \"active\": true\r",
									"        },\r",
									"        {\r",
									"            \"organizationName\": \"Audacious Test Organization 8\",\r",
									"            \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353ca\",\r",
									"            \"active\": true\r",
									"        },\r",
									"        {\r",
									"            \"organizationName\": \"Audacious Test Organization 9\",\r",
									"            \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353bf\",\r",
									"            \"active\": true\r",
									"        }\r",
									"    ],\r",
									"    \"has_more\": \"true\"\r",
									"}\r",
									"    );\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/organizations?prevCursor=0d15449b-fb08-4013-8985-20c148b353ab&limit=5",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"organizations"
							],
							"query": [
								{
									"key": "prevCursor",
									"value": "0d15449b-fb08-4013-8985-20c148b353ab"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getOrgListWithStartPointNotExists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"returns  default org list\", function() {\r",
									"    pm.expect(pm.response.json()).to.eql(\r",
									"    {\r",
									"    \"data\": [\r",
									"        {\r",
									"            \"organizationName\": \"Audacious Test Organization 1\",\r",
									"            \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353af\",\r",
									"            \"active\": true\r",
									"        },\r",
									"        {\r",
									"            \"organizationName\": \"Audacious Test Organization 2\",\r",
									"            \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353be\",\r",
									"            \"active\": true\r",
									"        },\r",
									"        {\r",
									"            \"organizationName\": \"Audacious Test Organization 3\",\r",
									"            \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353cc\",\r",
									"            \"active\": true\r",
									"        },\r",
									"        {\r",
									"            \"organizationName\": \"Audacious Test Organization 4\",\r",
									"            \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353cb\",\r",
									"            \"active\": true\r",
									"        },\r",
									"        {\r",
									"            \"organizationName\": \"Audacious Test Organization 5\",\r",
									"            \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353ba\",\r",
									"            \"active\": true\r",
									"        },\r",
									"        {\r",
									"            \"organizationName\": \"Audacious Test Organization 6\",\r",
									"            \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353cd\",\r",
									"            \"active\": true\r",
									"        },\r",
									"        {\r",
									"            \"organizationName\": \"Audacious Test Organization 7\",\r",
									"            \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353ae\",\r",
									"            \"active\": true\r",
									"        },\r",
									"        {\r",
									"            \"organizationName\": \"Audacious Test Organization 8\",\r",
									"            \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353ca\",\r",
									"            \"active\": true\r",
									"        },\r",
									"        {\r",
									"            \"organizationName\": \"Audacious Test Organization 9\",\r",
									"            \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353bf\",\r",
									"            \"active\": true\r",
									"        },\r",
									"        {\r",
									"            \"organizationName\": \"Audacious Test Organization 10\",\r",
									"            \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353ab\",\r",
									"            \"active\": true\r",
									"        }\r",
									"    ],\r",
									"    \"has_more\": \"true\"\r",
									"}\r",
									"    );\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/organizations?nextCursor=1d15449b-fb08-4013-8985-20c148b353ab",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"organizations"
							],
							"query": [
								{
									"key": "nextCursor",
									"value": "1d15449b-fb08-4013-8985-20c148b353ab"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getOrgListWithEndPointNotExists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"returns default org list\", function() {\r",
									"    pm.expect(pm.response.json()).to.eql(\r",
									"    {\r",
									"    \"data\": [\r",
									"        {\r",
									"            \"organizationName\": \"Audacious Test Organization 1\",\r",
									"            \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353af\",\r",
									"            \"active\": true\r",
									"        },\r",
									"        {\r",
									"            \"organizationName\": \"Audacious Test Organization 2\",\r",
									"            \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353be\",\r",
									"            \"active\": true\r",
									"        },\r",
									"        {\r",
									"            \"organizationName\": \"Audacious Test Organization 3\",\r",
									"            \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353cc\",\r",
									"            \"active\": true\r",
									"        },\r",
									"        {\r",
									"            \"organizationName\": \"Audacious Test Organization 4\",\r",
									"            \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353cb\",\r",
									"            \"active\": true\r",
									"        },\r",
									"        {\r",
									"            \"organizationName\": \"Audacious Test Organization 5\",\r",
									"            \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353ba\",\r",
									"            \"active\": true\r",
									"        },\r",
									"        {\r",
									"            \"organizationName\": \"Audacious Test Organization 6\",\r",
									"            \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353cd\",\r",
									"            \"active\": true\r",
									"        },\r",
									"        {\r",
									"            \"organizationName\": \"Audacious Test Organization 7\",\r",
									"            \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353ae\",\r",
									"            \"active\": true\r",
									"        },\r",
									"        {\r",
									"            \"organizationName\": \"Audacious Test Organization 8\",\r",
									"            \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353ca\",\r",
									"            \"active\": true\r",
									"        },\r",
									"        {\r",
									"            \"organizationName\": \"Audacious Test Organization 9\",\r",
									"            \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353bf\",\r",
									"            \"active\": true\r",
									"        },\r",
									"        {\r",
									"            \"organizationName\": \"Audacious Test Organization 10\",\r",
									"            \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353ab\",\r",
									"            \"active\": true\r",
									"        }\r",
									"    ],\r",
									"    \"has_more\": \"true\"\r",
									"}\r",
									"    );\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/organizations?prevCursor=1d15449b-fb08-4013-8985-20c148b353ab",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"organizations"
							],
							"query": [
								{
									"key": "prevCursor",
									"value": "1d15449b-fb08-4013-8985-20c148b353ab"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "createOrg",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"returns success code\", function() {\r",
									"    pm.expect(pm.response.code = 200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\"Test 20\"",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/organizations",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "createOrgIncomplete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"returns error code\", function() {\r",
									"    pm.expect(pm.response.code = 400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/organizations",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateOrgExistsV2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"returns new org\", function() {\r",
									"    pm.expect(pm.response.json()).to.eql(\r",
									"    {\r",
									"    \"active\": true,\r",
									"    \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353ad\",\r",
									"    \"organizationName\": \"Audacious Test Organization 13\"\r",
									"    }   \r",
									"    );\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353ad\",\r\n    \"organizationName\": \"Audacious Test Organization 13\",\r\n    \"active\": true\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/organizations/0d15449b-fb08-4013-8985-20c148b353ad",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"organizations",
								"0d15449b-fb08-4013-8985-20c148b353ad"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateOrgExists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"returns new org\", function() {\r",
									"    pm.expect(pm.response.json()).to.eql(\r",
									"    {\r",
									"    \"active\": false,\r",
									"    \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353ac\",\r",
									"    \"organizationName\": \"Audacious Test Organization 14\"\r",
									"    }   \r",
									"    );\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353ac\",\r\n    \"organizationName\": \"Audacious Test Organization 14\",\r\n    \"active\": false\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/organizations/0d15449b-fb08-4013-8985-20c148b353ac",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"organizations",
								"0d15449b-fb08-4013-8985-20c148b353ac"
							]
						}
					},
					"response": []
				},
				{
					"name": "resetUpdateOrgExistsV2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"returns new org\", function() {\r",
									"    pm.expect(pm.response.json()).to.eql(\r",
									"    {\r",
									"    \"active\": false,\r",
									"    \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353ad\",\r",
									"    \"organizationName\": \"Audacious Test Organization 13\"\r",
									"    }   \r",
									"    );\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353ad\",\r\n    \"organizationName\": \"Audacious Test Organization 13\",\r\n    \"active\": false\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/organizations/0d15449b-fb08-4013-8985-20c148b353ad",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"organizations",
								"0d15449b-fb08-4013-8985-20c148b353ad"
							]
						}
					},
					"response": []
				},
				{
					"name": "resetUpdateOrgExists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"returns new org\", function() {\r",
									"    pm.expect(pm.response.json()).to.eql(\r",
									"    {\r",
									"    \"active\": true,\r",
									"    \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353ac\",\r",
									"    \"organizationName\": \"Audacious Test Organization 14\"\r",
									"    }   \r",
									"    );\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"organizationId\": \"0d15449b-fb08-4013-8985-20c148b353ac\",\r\n    \"organizationName\": \"Audacious Test Organization 14\",\r\n    \"active\": true\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/organizations/0d15449b-fb08-4013-8985-20c148b353ac",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"organizations",
								"0d15449b-fb08-4013-8985-20c148b353ac"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateOrgNotExists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"returns errror code\", function() {\r",
									"    pm.expect(pm.response.code = 400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/organizations/1d15449b-fb08-4013-8985-20c148b353aa",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"organizations",
								"1d15449b-fb08-4013-8985-20c148b353aa"
							]
						}
					},
					"response": []
				},
				{
					"name": "TS_TC_01 QBP ZipFixer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const xml2js = require('xml2js');\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is As Expected\", function () {\r",
									"    var response = utils.removeNS(xml2Json(responseBody));\r",
									"    var hl7Message = response['Envelope']['Body']['SubmitSingleMessageResponse']['Hl7Message'];\r",
									"    pm.expect(utils.hl7Terser(hl7Message, 'QPD', 8, 5)).to.eql('21202-1234');\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"utils.testSLA(pm, LONG_SLA);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"utils.setup(pm);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"host": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Host",
								"value": "{{hostHeader}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:urn=\"urn:cdc:iisb:hub:2014\" xmlns:urn1=\"urn:cdc:iisb:2014\">\r\n  <soap:Header xmlns:wsa=\"http://www.w3.org/2005/08/addressing\">\r\n    <urn:HubRequestHeader>\r\n      <urn:DestinationId>dev</urn:DestinationId>\r\n    </urn:HubRequestHeader>\r\n    <wsa:Action>urn:cdc:iisb:hub:2014:IISHubPortType:SubmitSingleMessageRequest</wsa:Action>\r\n    <wsa:MessageID>{{testMessageId}}</wsa:MessageID>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <urn1:SubmitSingleMessageRequest>\r\n      <urn1:FacilityID>IZG</urn1:FacilityID>\r\n      <urn1:Hl7Message>{{GoodMessageQBP}}</urn1:Hl7Message>\r\n    </urn1:SubmitSingleMessageRequest>\r\n  </soap:Body>\r\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/IISHubService",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"IISHubService"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var goodResponse =",
					"    \"MSH|^~\\\\&|IRIS IIS|IRIS||IZG|20220205||RSP^K11^RSP_K11|20210330093013AZQ231|P|2.5.1|||||||||Z32^CDCPHINVS\\rMSA|AA|20210330093013AZQ231||0||0^Message Accepted^HL70357\\rQAK|20210330093013AZQ231|NF|Z34^Request Complete Immunization history^CDCPHINVS\\rQPD|Z34^Request Immunization History^CDCPHINVS|20210330093013IA231|112258-9^^^IA^MR|JohnsonIZG^JamesIZG^AndrewIZG^^^^L|LeungIZG^SarahIZG^^^^^M|20160414|M|Main Street&amp;&amp;123^^Adel^IA^50003^^L|^PRN^PH^^^555^5551111|Y|1\";",
					"pm.collectionVariables.set(\"GoodResponse\", goodResponse)",
					"pm.collectionVariables.set(\"GoodResponseLF\", goodResponse.replace(\"\\r\", \"\\n\"))",
					"pm.collectionVariables.set(\"GoodResponseCRLF\", goodResponse.replace(\"\\r\", \"\\r\\n\"))",
					"",
					"var goodRequest = pm.collectionVariables.get(\"GoodMessage\");",
					"pm.collectionVariables.set(\"GoodMessageLF\", goodRequest.replace(\"\\r\", \"\\n\"))",
					"pm.collectionVariables.set(\"GoodMessageCRLF\", goodRequest.replace(\"\\r\", \"\\r\\n\"))",
					"",
					"var tooLarge = goodResponse.replace('&|', \"&amp;|\");",
					"var last;",
					"var maxLength = 65536;",
					"",
					"LONG_SLA = 1000;",
					"BASE_SLA = 500; // Change back to 250 after performance fix",
					"TX_SLA = 250; // Change back to 150 after performance fix",
					"",
					"for (i = 0; tooLarge.length < maxLength; i++) {",
					"    last = tooLarge;",
					"    tooLarge = tooLarge + tooLarge;",
					"}",
					"",
					"pm.collectionVariables.set(\"TooLargeMessage\", tooLarge);",
					"pm.collectionVariables.set(\"IisTooLargeMessage\", last);",
					"toLarge = last = \"\";",
					"",
					"pm.collectionVariables.set(\"hex0b\", \"\\u000b\");",
					"pm.collectionVariables.set(\"hex1b\", \"\\u001c\");",
					"",
					"theLogs = null;",
					"",
					"var env = pm.environment.get(\"testingEnvironment\");",
					"var CLASSNAME = /^[a-zA-Z_][a-zA-Z_0-9]*(\\.[a-zA-Z_][a-zA-Z_0-9]*)*$/;",
					"var JAVA_FILENAME = /^[a-zA-Z_][a-zA-Z_0-9]*.java$/;",
					"var POSITIVE_NUMBER = /^\\d+$/;",
					"var TIMESTAMP = /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d[0-5]\\d|Z)/;",
					"var POSITIVE_NUMBERS = /^\\d+(,\\d+)*$/;",
					"var EVENTID_NUMBER = /^\\d+.\\d+$/;",
					"var JAVA_IDENTIFIER = /^[a-zA-Z_][a-zA-Z_0-9]*$/;",
					"var THREAD_NAME = /^[\\-a-zA-Z_0-9. ]*$/;",
					"var HTTPURL = /^(https?:\\/\\/[a-zA-Z0-9\\-]+(\\.[a-zA-Z0-9\\-_%]+)*)?(:[0-9]+)?(\\/[\\-a-zA-Z0-9-_%\\.]*)*$/;",
					"var DESTID = /^.{2,16}$/;",
					"var DESTIDLC = /^[-a-z_0-9]{2,16}$/;",
					"var DESTIDUC = /^[-A-Z_0-9]{2,16}$/;",
					"var INOROUT = /^INBOUND|OUTBOUND$/;",
					"var CLIENTORSERVER = /^CLIENT|SERVER$/;",
					"var YYYY_MM_DD = /^20[2-9][0-9]-[01][0-9]-[0-3][0-9]$/;",
					"var FACID = /[0-9A-Z]+/;",
					"var HL7REQMESSAGE = /^(MSH\\|.*(QBP|VXU|RSP)[\\s\\S]*)|Wishing[\\s\\S]*$/;",
					"var HL7ERROR = /^(MSH\\|[\\s\\S]*MSA\\|[\\s\\S]*)|$/;",
					"var BOOLEAN = /^true|false$/;",
					"var MESSAGE_TYPE = /^submitSingleMessage|connectivityTest|invalidRequest|ads|\\/rest\\/.*$/;",
					"var IPADDR = /^[1-9][0-9]{0,2}(\\.[0-9]{1,3}){3}$|^([A-Fa-f0-9:])+$/;",
					"var UUID = /^[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}$/;",
					"var DNS_NAME = /^[a-z0-9\\-]{2,}(\\.[a-z0-9\\-]+)*$|^[1-9][0-9]{0,2}(\\.[0-9]{1,3}){3}$|^([A-Fa-f0-9:])+$/;",
					"var COMPUTER_NAME = /^[A-Za-z0-9\\-]{2,}(\\.[A-Za-z0-9\\-]+)*$|^[1-9][0-9]{0,2}(\\.[0-9]{1,3}){3}$|^([A-Fa-f0-9:])+$/;",
					"var COMMON_NAME = /^[a-z][a-z0-9\\-]*(\\.[a-z][a-z0-9\\-]*)*$/;",
					"ADS_SOURCE_VERSION = \"V2023-09-01\"; // Needs to have global scope",
					"",
					"function checkForPHI(caseName, value, pm) {",
					"    var failure = false;",
					"    pm.test('Logger-TC06/07' + caseName + 'Verify HL7 content in logs does not contain PII', function() {",
					"        if (value == null) {",
					"            return;",
					"        }",
					"        var segments = value.split(/[\\n\\r]/);",
					"        for (segment of segments) {",
					"            pm.expect(segment).to.match(/^|MSH|MSA|ERR|\\.\\.\\..*$/);",
					"            if (segment.match(/^ERR/)) {",
					"                var fields = segment.split(/\\|/);",
					"                if (fields.length > 3 && fields[3].length > 0) {",
					"                    components = fields[3].split(\"^\");",
					"                    pm.expect(components.length <= 1 || components[1].length == 0);",
					"                }",
					"            }",
					"        }",
					"    });",
					"}",
					"function testLogEntry(entry, pm, index) {",
					"    var success = false;",
					"    var failed = false;",
					"    function _test(n, f) {",
					"        success = false;",
					"        pm.test(n, f);",
					"        if (!success) failed = true;",
					"    }",
					"    if (entry['caller_class_name'] !== undefined) {",
					"        _test('Log Entry['+index+'] to contain caller_class_name matching ' + CLASSNAME, function () {",
					"            pm.expect(entry).to.have.nested.property('caller_class_name');",
					"            pm.expect(entry.caller_class_name).to.match(CLASSNAME);",
					"            success = true;",
					"        });",
					"    }",
					"    if (entry['caller_file_name'] !== undefined) {",
					"        _test('Log Entry['+index+'] to contain caller_file_name matching ' + JAVA_FILENAME, function () {",
					"            pm.expect(entry).to.have.nested.property('caller_file_name');",
					"            pm.expect(entry.caller_file_name).to.match(JAVA_FILENAME);",
					"            success = true;",
					"        });",
					"    }",
					"    if (entry['caller_line_number'] !== undefined) {",
					"        _test('Log Entry['+index+'] to contain caller_line_number matching ' + POSITIVE_NUMBER, function () {",
					"            pm.expect(entry).to.have.nested.property('caller_line_number');",
					"            pm.expect(entry.caller_line_number).to.match(POSITIVE_NUMBER);",
					"            success = true;",
					"        });",
					"    }",
					"    if (entry['caller_method_name'] !== undefined) {",
					"        _test('Log Entry['+index+'] to contain caller_method_name matching ' + JAVA_IDENTIFIER, function () {",
					"            pm.expect(entry).to.have.nested.property('caller_method_name');",
					"            pm.expect(entry.caller_method_name).to.match(JAVA_IDENTIFIER);",
					"            success = true;",
					"        });",
					"    }",
					"    _test('Log Entry['+index+'] to contain level matching INFO|WARN|ERROR|DEBUG|TRACE', function () {",
					"        pm.expect(entry).to.have.nested.property('level');",
					"        pm.expect(entry.level).to.match(/INFO|WARN|ERROR|DEBUG|TRACE/);",
					"        success = true;",
					"    });",
					"    _test('Log Entry['+index+'] to contain level_value matching ' + POSITIVE_NUMBER, function () {",
					"        pm.expect(entry).to.have.nested.property('level_value');",
					"        pm.expect(entry.level_value).to.match(POSITIVE_NUMBER);",
					"        success = true;",
					"    });",
					"",
					"    _test('Log Entry['+index+'] to contain logger_name matching ' + CLASSNAME, function () {",
					"        pm.expect(entry).to.have.nested.property('logger_name');",
					"        pm.expect(entry.logger_name).to.match(CLASSNAME);",
					"        success = true;",
					"    });",
					"    _test('Log Entry['+index+'] to contain thread_name matching ' + THREAD_NAME, function () {",
					"        pm.expect(entry).to.have.nested.property('thread_name');",
					"        pm.expect(entry.thread_name).to.match(THREAD_NAME);",
					"        success = true;",
					"    });",
					"    _test('Log Entry['+index+'] to contain message', function () {",
					"        pm.expect(entry).to.have.nested.property('message');",
					"        success = true;",
					"    });",
					"    if (entry['ws_request_message'] !== undefined) {",
					"        _test('Log Entry['+index+'] to contain ws_request_message.direction matching INBOUND|OUTBOUND', function () {",
					"            pm.expect(entry).to.have.nested.property('ws_request_message.direction');",
					"            pm.expect(entry.ws_request_message.direction).to.match(INOROUT);",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain ws_request_message.endpointAddress having a URL', function () {",
					"            pm.expect(entry).to.have.nested.property('ws_request_message.endpointAddress');",
					"            pm.expect(entry.ws_request_message.endpointAddress).to.match(HTTPURL)",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain ws_request_message.endpointType matching SERVER|CLIENT', function () {",
					"            pm.expect(entry).to.have.nested.property('ws_request_message.endpointType');",
					"            pm.expect(entry.ws_request_message.endpointType).to.match(CLIENTORSERVER);",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain ws_request_message.eventId matching ' + EVENTID_NUMBER, function () {",
					"            pm.expect(entry).to.have.nested.property('ws_request_message.eventId');",
					"            pm.expect(entry.ws_request_message.eventId).to.match(POSITIVE_NUMBER);",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain ws_request_message.payload', function () {",
					"            pm.expect(entry).to.have.nested.property('ws_request_message.payload');",
					"            success = true;",
					"        });",
					"        // Only check soapHeaders if present, they may not be if inbound Headers could",
					"        // not be parsed.",
					"        if (entry?.ws_request_message?.soapHeaders !== null) {",
					"            _test('Log Entry['+index+'] to contain ws_request_message.soapHeaders.Action', function () {",
					"                pm.expect(entry).to.have.nested.property('ws_request_message.soapHeaders.Action');",
					"                success = true;",
					"        });",
					"    ",
					"            if (entry?.ws_request_message?.soapHeaders?.FaultTo !== undefined) {",
					"                _test('Log Entry['+index+'] to contain ws_request_message.soapHeaders.FaultTo.Address having a URL', function () {",
					"                    pm.expect(entry).to.have.nested.property('ws_request_message.soapHeaders.FaultTo.Address');",
					"                    pm.expect(entry.ws_request_message.soapHeaders.FaultTo.Address).to.match(HTTPURL);",
					"                    success = true;",
					"            });",
					"            }",
					"            // some test cases purposefully mess up the header",
					"            if (entry?.ws_request_message?.soapHeaders?.HubRequestHeader !== undefined && entry?.ws_request_message?.soapHeaders?.HubRequestHeader !== null) {",
					"                _test('Log Entry['+index+'] to contain ws_request_message.soapHeaders.HubRequestHeader.DestinationId matching .{2,7}', function () {",
					"                    pm.expect(entry).to.have.nested.property('ws_request_message.soapHeaders.HubRequestHeader.DestinationId');",
					"                    // While we'd like to check for correct values, we also report INCORRECT Values in the DestinationId",
					"                    pm.expect(entry?.ws_request_message?.soapHeaders?.HubRequestHeader?.DestinationId).to.match(DESTID);",
					"                    success = true;",
					"                });",
					"            }",
					"",
					"            _test('Log Entry['+index+'] to contain ws_request_message.soapHeaders.MessageID', function () {",
					"                pm.expect(entry).to.have.nested.property('ws_request_message.soapHeaders.MessageID');",
					"                success = true;",
					"            });",
					"            // To is technically not required",
					"            if (entry?.ws_request_message.soapHeaders?.To !== undefined) {",
					"                _test('Log Entry['+index+'] to contain ws_request_message.soapHeaders.To matching a URL', function () {",
					"                    pm.expect(entry).to.have.nested.property('ws_request_message.soapHeaders.To');",
					"                    pm.expect(entry.ws_request_message.soapHeaders.To).to.match(HTTPURL);",
					"                    success = true;",
					"                });",
					"            }",
					"        }",
					"    }",
					"    if (entry['ws_response_message'] !== undefined) {",
					"        _test('Log Entry['+index+'] to contain ws_response_message.direction matching INBOUND|OUTBOUND', function () {",
					"            pm.expect(entry).to.have.nested.property('ws_response_message.direction');",
					"            pm.expect(entry.ws_response_message.direction).to.match(INOROUT);",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain ws_response_message.endpointAddress having a url', function () {",
					"            pm.expect(entry).to.have.nested.property('ws_response_message.endpointAddress');",
					"            pm.expect(entry.ws_response_message.endpointAddress).to.match(HTTPURL)",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain ws_response_message.endpointType', function () {",
					"            pm.expect(entry).to.have.nested.property('ws_response_message.endpointType');",
					"            pm.expect(entry.ws_response_message.endpointType).to.match(CLIENTORSERVER);",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain ws_response_message.eventId', function () {",
					"            pm.expect(entry).to.have.nested.property('ws_response_message.eventId');",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain ws_response_message.payload', function () {",
					"            pm.expect(entry).to.have.nested.property('ws_response_message.payload');",
					"            success = true;",
					"        });",
					"        if (entry.ws_response_message.soapFault !== null) {",
					"            _test('Log Entry['+index+'] to contain ws_response_message.soapFault.Code', function () {",
					"                pm.expect(entry).to.have.nested.property('ws_response_message.soapFault.Code');",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain ws_response_message.soapFault.Detail', function () {",
					"                pm.expect(entry).to.have.nested.property('ws_response_message.soapFault.Detail');",
					"                success = true;",
					"            });",
					"            if (entry?.ws_response_message?.soapFault?.Detail !== undefined) {",
					"                if (entry.ws_response_message.soapFault.Detail.DestinationConnectionFault !== undefined) {",
					"                    _test('Log Entry['+index+'] to contain ws_response_message.soapFault.Detail.DestinationConnectionFault.DestinationId matching [a-z0-9_]{2,7}', function () {",
					"                        pm.expect(entry).to.have.nested.property('ws_response_message.soapFault.Detail.DestinationConnectionFault.DestinationId');",
					"                        pm.expect(entry.ws_response_message.soapFault.Detail.DestinationConnectionFault.DestinationId).to.match(DESTID);",
					"                        success = true;",
					"                    });",
					"                    _test('Log Entry['+index+'] to contain ws_response_message.soapFault.Detail.DestinationConnectionFault.DestinationUri', function () {",
					"                        pm.expect(entry).to.have.nested.property('ws_response_message.soapFault.Detail.DestinationConnectionFault.DestinationUri');",
					"                        success = true;",
					"                    });",
					"                }",
					"                if (entry?.ws_response_message?.soapFault?.Detail?.HubClientFault !== undefined) {",
					"                    _test('Log Entry['+index+'] to contain ws_response_message.soapFault.Detail.HubClientFault.DestinationId matching [a-z0-9_]{2,7}', function () {",
					"                        pm.expect(entry).to.have.nested.property('ws_response_message.soapFault.Detail.HubClientFault.DestinationId');",
					"                        pm.expect(entry.ws_response_message.soapFault.Detail.HubClientFault.DestinationId).to.match(DESTID);",
					"                        success = true;",
					"                    });",
					"                    _test('Log Entry['+index+'] to contain ws_response_message.soapFault.Detail.HubClientFault.DestinationUri matching https?://[a-zA-Z][a-zA-Z0-9\\-]*(\\.[a-zA-Z][a-zA-Z0-9\\-_%]*)*(:[0-9]+)?(/[a-zA-Z0-9\\-_%.]+)*', function () {",
					"                        pm.expect(entry).to.have.nested.property('ws_response_message.soapFault.Detail.HubClientFault.DestinationUri');",
					"                        pm.expect(entry.ws_response_message.soapFault.Detail.HubClientFault.DestinationUri).to.match(HTTPURL);",
					"                        success = true;",
					"                    });",
					"                }",
					"            }",
					"            _test('Log Entry['+index+'] to contain ws_response_message.soapFault.Reason', function () {",
					"                pm.expect(entry).to.have.nested.property('ws_response_message.soapFault.Reason');",
					"                success = true;",
					"            });",
					"        }",
					"",
					"        // Only check soapHeaders if present, they may be absent if inbound headers",
					"        // could not be parsed.",
					"        if (entry?.ws_response_message?.soapHeaders != null) {",
					"            _test('Log Entry['+index+'] to contain ws_response_message.soapHeaders.Action', function () {",
					"                pm.expect(entry).to.have.nested.property('ws_response_message.soapHeaders.Action');",
					"                success = true;",
					"            });",
					"            // Only certain message types have a HubResponseHeader",
					"            if (entry?.ws_response_message?.soapHeaders?.HubResponseHeader !== undefined) {",
					"                _test('Log Entry['+index+'] to contain ws_response_message.soapHeaders.HubResponseHeader.DestinationId matching ' + DESTID, function () {",
					"                    pm.expect(entry).to.have.nested.property('ws_response_message.soapHeaders.HubResponseHeader.DestinationId');",
					"                    pm.expect(entry.ws_response_message.soapHeaders.HubResponseHeader.DestinationId).to.match(DESTID);",
					"                    success = true;",
					"                });",
					"                _test('Log Entry['+index+'] to contain ws_response_message.soapHeaders.HubResponseHeader.DestinationUri matching a URL', function () {",
					"                    pm.expect(entry).to.have.nested.property('ws_response_message.soapHeaders.HubResponseHeader.DestinationUri');",
					"                    pm.expect(entry.ws_response_message.soapHeaders.HubResponseHeader.DestinationUri).to.match(HTTPURL);",
					"                    success = true;",
					"                });",
					"            }",
					"            _test('Log Entry['+index+'] to contain ws_response_message.soapHeaders.MessageID', function () {",
					"                pm.expect(entry).to.have.nested.property('ws_response_message.soapHeaders.MessageID');",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain ws_response_message.soapHeaders.RelatesTo', function () {",
					"                pm.expect(entry).to.have.nested.property('ws_response_message.soapHeaders.RelatesTo');",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain ws_response_message.soapHeaders.To', function () {",
					"                pm.expect(entry).to.have.nested.property('ws_response_message.soapHeaders.To');",
					"                pm.expect(entry.ws_response_message.soapHeaders.To).to.match(HTTPURL);",
					"                success = true;",
					"            });",
					"        }",
					"    }",
					"",
					"    _test('Log Entry['+index+'] to contain eventId matching ' + EVENTID_NUMBER, function () {",
					"        pm.expect(entry, 'Expected log event to have eventId for message: \"' + entry.message + '\"').to.have.nested.property('eventId');",
					"        pm.expect(entry.eventId).to.match(EVENTID_NUMBER);",
					"        success = true;",
					"    });",
					"",
					"    if (entry['transactionData'] !== undefined) {",
					"        _test('Logging-TC_03 Log Entry['+index+'] to contain transactionData.dateTime matching ' + TIMESTAMP, function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.dateTime');",
					"            pm.expect(entry.transactionData.dateTime).to.match(TIMESTAMP);",
					"            success = true;",
					"        });",
					"",
					"        if (entry?.transactionData?.destination?.connected) {",
					"            _test('Log Entry['+index+'] to contain transactionData.destinationID matching [-a-z_0-9]{2,7}', function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.destinationID');",
					"                pm.expect(entry.transactionData.destinationID).to.match(DESTIDLC);",
					"                success = true;",
					"            });",
					"            ",
					"            _test('Log Entry['+index+'] to contain transactionData.destinationURL matching https://[a-zA-Z][a-zA-Z0-9\\-]*(\\.[a-zA-Z][a-zA-Z0-9\\-_%]*)*(/[a-zA-Z0-9\\-_%.]+)*', function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.destinationURL');",
					"                pm.expect(entry.transactionData.destinationURL).to.match(HTTPURL);",
					"                success = true;",
					"            });",
					"",
					"            _test('Log Entry['+index+'] to contain transactionData.source.cipherSuite matching TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384|TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384|TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256|TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256|TLS_DHE_RSA_WITH_AES_256_GCM_SHA384|TLS_DHE_DSS_WITH_AES_256_GCM_SHA384|TLS_DHE_RSA_WITH_AES_128_GCM_SHA256|TLS_DHE_DSS_WITH_AES_128_GCM_SHA256|TLS_AES_256_GCM_SHA384|TLS_AES_128_GCM_SHA256|INTERNAL_JAVA_CALL', function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.source.cipherSuite');",
					"                pm.expect(entry.transactionData.source.cipherSuite).to.match(/^(TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384|TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384|TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256|TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256|TLS_DHE_RSA_WITH_AES_256_GCM_SHA384|TLS_DHE_DSS_WITH_AES_256_GCM_SHA384|TLS_DHE_RSA_WITH_AES_128_GCM_SHA256|TLS_DHE_DSS_WITH_AES_128_GCM_SHA256|TLS_AES_256_GCM_SHA384|TLS_AES_128_GCM_SHA256|INTERNAL_JAVA_CALL)$/);",
					"                success = true;",
					"            });",
					"",
					"            _test('Log Entry['+index+'] to contain transactionData.destination.fips matching [-A-Z_0-9]{2,7}', function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.destination.fips');",
					"                pm.expect(entry.transactionData.destination.fips).to.match(DESTIDUC);",
					"                success = true;",
					"            });",
					"            _test('Logging-TC_05a Log Entry['+index+'] to contain transactionData.elapsedTimeIIS matching [1-9][0-9]*', function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.elapsedTimeIIS');",
					"                pm.expect(entry.transactionData.elapsedTimeIIS).to.match(POSITIVE_NUMBER);",
					"                success = true;",
					"            });",
					"            _test('Logging-TC_05d Log Entry['+index+'] transactionData.elapsedTimeIIS + transactionData.elapsedTimeIIS = transactionData.elapsedTimeTotal', function () {",
					"                pm.expect(entry.transactionData.elapsedTimeIIS + entry.transactionData.elapsedTimeProcessing).to.eql(entry.transactionData.elapsedTimeTotal);",
					"                success = true;",
					"            });",
					"        }",
					"        // FacilityID is optional in some cases",
					"        if (entry?.transactionData?.facilityID != null) {",
					"            _test('Logging-TC_01g Log Entry['+index+'] to contain transactionData.facilityID matching [A-Z0-9]*', function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.facilityID');",
					"                pm.expect(entry.transactionData.facilityID).to.match(FACID);",
					"                success = true;",
					"            });",
					"        }",
					"        if (entry?.transactionData?.processError) {",
					"            _test('Logging-TC_02b Log Entry['+index+'] to contain transactionData.faultName and faultCode', function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.faultName');",
					"                pm.expect(entry).to.have.nested.property('transactionData.faultCode');",
					"                success = true;",
					"            });",
					"        }",
					"        _test('Logging-TC_05b Log Entry['+index+'] to contain transactionData.elapsedTimeProcessing matching ' + POSITIVE_NUMBER, function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.elapsedTimeProcessing');",
					"            pm.expect(entry.transactionData.elapsedTimeProcessing).to.match(POSITIVE_NUMBER);",
					"            success = true;",
					"        });",
					"        _test('Logging-TC_05c Log Entry['+index+'] to contain transactionData.elapsedTimeTotal matching ' + POSITIVE_NUMBER, function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.elapsedTimeTotal');",
					"            pm.expect(entry.transactionData.elapsedTimeTotal).to.match(POSITIVE_NUMBER);",
					"            success = true;",
					"        });",
					"        _test('Logging-TC_08/09 Log Entry['+index+'] to contain transactionData.hasHL7Error matching ' + BOOLEAN, function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.hasHL7Error');",
					"            pm.expect(entry.transactionData.hasHL7Error).to.match(BOOLEAN);",
					"            success = true;",
					"        });",
					"",
					"        _test('Log Entry['+index+'] to contain transactionData.hasProcessError matching ' + BOOLEAN, function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.hasProcessError');",
					"            pm.expect(entry.transactionData.hasProcessError).to.match(BOOLEAN);",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain transactionData.hl7Error matching ' + HL7ERROR, function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.hl7Error');",
					"            pm.expect(entry.transactionData.hl7Error).to.match(HL7ERROR);",
					"            success = true;",
					"        });",
					"        checkForPHI('a', entry.transactionData.hl7Error, pm);",
					"",
					"        _test('Log Entry['+index+'] to contain transactionData.messageId', function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.messageId');",
					"            if (!entry.requestUri.endsWith('/dev/client_Service')) {",
					"                pm.expect(entry.transactionData.messageId.length).to.be.above(0);",
					"            }",
					"            success = true;",
					"        });",
					"        ",
					"        _test('Logging-TC_04 Log Entry['+index+'] to contain transactionData.messageType matching ' + MESSAGE_TYPE, function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.messageType');",
					"            pm.expect(entry.transactionData.messageType).to.match(MESSAGE_TYPE);",
					"            success = true;",
					"        });",
					"        if (entry?.transactionData?.processError !== undefined && entry?.transactionData?.processError?.length > 0) {",
					"            _test('Logging-TC_02a Log Entry['+index+'] to contain transactionData.processError matching processErrorSummary + :  + processErrorDetail', function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.processError');",
					"                if (entry?.transactionData?.processErrorDetail != null) {",
					"                    pm.expect(entry.transactionData.processError).to.be.eql(entry.transactionData.processErrorSummary + \": \" + entry.transactionData.processErrorDetail);",
					"                } else {",
					"                    pm.expect(entry.transactionData.processError).to.be.eql(entry.transactionData.processErrorSummary);",
					"                }",
					"                success = true;",
					"            });",
					"        }",
					"        _test('Logging-TC_02b Log Entry['+index+'] to contain transactionData.processErrorSummary', function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.processErrorSummary');",
					"            success = true;",
					"        });",
					"        _test('Logging-TC_02b Log Entry['+index+'] to contain transactionData.processErrorDetail', function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.processErrorDetail');",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain transactionData.prod matching ' + BOOLEAN, function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.prod');",
					"            pm.expect(entry.transactionData.prod).to.match(BOOLEAN);",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain transactionData.replyTo', function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.replyTo');",
					"            success = true;",
					"        });",
					"        if (entry?.transactionData?.requestHL7Message != null && entry?.transactionData?.requestHL7Message?.length != 0) {",
					"            // On an a fault, these values may not be present, so only execute if not an common Fault type",
					"            _test('Log Entry['+index+'] to contain transactionData.requestHL7Message matching ' + HL7REQMESSAGE, function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.requestHL7Message');",
					"                pm.expect(entry.transactionData.requestHL7Message).to.match(HL7REQMESSAGE);",
					"                success = true;",
					"            });",
					"            checkForPHI('b', entry.transactionData.requestHL7Message, pm);",
					"            _test('Logging-TC_10/11 Log Entry['+index+'] to contain transactionData.requestPayloadType matching VXU|QBP|Other', function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.requestPayloadType');",
					"                pm.expect(entry.transactionData.requestPayloadType).to.match(/^VXU|QBP|ADS|Other$/);",
					"                if (entry.transactionData.requestHL7Message.match(/QBP/)) {",
					"                    pm.expect(entry.transactionData.requestPayloadType).to.match(/^QBP$/);",
					"                }",
					"                if (entry.transactionData.requestHL7Message.match(/VXU/)) {",
					"                    pm.expect(entry.transactionData.requestPayloadType).to.match(/^VXU$/);",
					"                }",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain transactionData.requestPayloadSize matching [1-9][0-9]*', function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.requestPayloadSize');",
					"                pm.expect(entry.transactionData.requestPayloadSize).to.match(POSITIVE_NUMBER);",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain transactionData.responseHL7Message matching MSH|.*MSA|.*', function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.responseHL7Message');",
					"                pm.expect(entry.transactionData.responseHL7Message).to.match(HL7ERROR);",
					"                success = true;",
					"            });",
					"            checkForPHI('c', entry.transactionData.responseHL7Message, pm);",
					"        }",
					"        _test('Log Entry['+index+'] to contain transactionData.responsePayloadSize matching [0-9]*', function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.responsePayloadSize');",
					"            pm.expect(entry.transactionData.responsePayloadSize).to.match(POSITIVE_NUMBER);",
					"            success = true;",
					"        });",
					"        _test('Logging-TC_02b Log Entry['+index+'] to contain transactionData.responseReceived matching true|false', function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.responseReceived');",
					"            pm.expect(entry.transactionData.responseReceived).to.match(BOOLEAN);",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain transactionData.serverMode matching dev|prod', function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.serverMode');",
					"            pm.expect(entry.transactionData.serverMode).to.match(/^dev|prod$/);",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain transactionData.sourceHost', function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.sourceHost');",
					"            success = true;",
					"        });",
					"        // Internal requests will come from internal server, which for performance testing",
					"        // will route through NLB rather than through 127.0.0.1",
					"        // When running in Docker Desktop, instead of 127.0.0.1, this will be 172.17.0.1",
					"        if (!entry?.requestUri.endsWith('/dev/IISService') && !entry?.requestUri.endsWith('/dev/client_Service')) {",
					"            _test('Log Entry['+index+'] to contain transactionData.sourceIP matching ' + IPADDR, function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.sourceIP');",
					"                pm.expect(entry.transactionData.sourceIP).to.match(IPADDR);",
					"                success = true;",
					"            });",
					"        }",
					"        _test('Log Entry['+index+'] to contain transactionData.threadId', function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.threadId');",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain transactionData.transactionId matching ' + UUID, function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.transactionId');",
					"            pm.expect(entry.transactionData.transactionId).to.match(UUID);",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain transactionData.wsdlVersion', function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.wsdlVersion');",
					"            success = true;",
					"        });",
					"",
					"        if (entry?.transactionData?.messageType != \"connectivityTest\") {",
					"            _test('Log Entry['+index+'] to contain requestMsh3', function () {",
					"                pm.expect(entry.transactionData).to.have.nested.property('requestMsh3');",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain requestMsh4', function () {",
					"                pm.expect(entry.transactionData).to.have.nested.property('requestMsh4');",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain requestMsh5', function () {",
					"                pm.expect(entry.transactionData).to.have.nested.property('requestMsh5');",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain requestMsh6', function () {",
					"                pm.expect(entry.transactionData).to.have.nested.property('requestMsh6');",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain requestMsh7', function () {",
					"                pm.expect(entry.transactionData).to.have.nested.property('requestMsh7');",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain requestMsh10', function () {",
					"                pm.expect(entry.transactionData).to.have.nested.property('requestMsh10');",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain requestMsh22', function () {",
					"                pm.expect(entry.transactionData).to.have.nested.property('requestMsh22');",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain responseMsh3', function () {",
					"                pm.expect(entry.transactionData).to.have.nested.property('responseMsh3');",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain responseMsh4', function () {",
					"                pm.expect(entry.transactionData).to.have.nested.property('responseMsh4');",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain responseMsh5', function () {",
					"                pm.expect(entry.transactionData).to.have.nested.property('responseMsh5');",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain responseMsh6', function () {",
					"                pm.expect(entry.transactionData).to.have.nested.property('responseMsh6');",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain responseMsh7', function () {",
					"                pm.expect(entry.transactionData).to.have.nested.property('responseMsh7');",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain responseMsh10', function () {",
					"                pm.expect(entry.transactionData).to.have.nested.property('responseMsh10');",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain responseMsh22', function () {",
					"                pm.expect(entry.transactionData).to.have.nested.property('responseMsh22');",
					"                success = true;",
					"            });",
					"        }",
					"",
					"        _test('Logging-TC_01a Log Entry['+index+'] to contain transactionData.source.ipAddress ' + IPADDR, function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.source.ipAddress');",
					"            pm.expect(entry.transactionData.source.ipAddress).to.match(IPADDR);",
					"            pm.expect(entry).to.have.nested.property('transactionData.source.host');",
					"            pm.expect(entry.transactionData.source.host).to.match(COMPUTER_NAME);",
					"            success = true;",
					"        });",
					"",
					"        _test('Logging-TC_01b Log Entry['+index+'] to contain transactionData.source.serialNumber matching ' + POSITIVE_NUMBER, function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.source.serialNumber');",
					"            pm.expect(entry.transactionData.source.serialNumber).to.match(POSITIVE_NUMBER);",
					"            success = true;",
					"        });",
					"        _test('Logging-TC_01c Log Entry['+index+'] to contain transactionData.source.organization', function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.source.organization');",
					"            success = true;",
					"        });",
					"        _test('Logging-TC_01d Log Entry['+index+'] to contain transactionData.source.commonName matching ' + COMMON_NAME, function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.source.commonName');",
					"            pm.expect(entry.transactionData.source.commonName).to.match(COMMON_NAME);",
					"            success = true;",
					"        });",
					"        _test('Logging-TC_01e Log Entry['+index+']to contain transactionData.source.validFrom matching ' + TIMESTAMP, function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.source.validFrom');",
					"            pm.expect(entry.transactionData.source.validFrom).to.match(TIMESTAMP);",
					"            success = true;",
					"        });",
					"        _test('Logging-TC_01f Log Entry['+index+'] to contain transactionData.source.validTo matching ' + TIMESTAMP, function () {",
					"            pm.expect(entry).to.have.nested.property('transactionData.source.validTo');",
					"            pm.expect(entry.transactionData.source.validTo).to.match(TIMESTAMP);",
					"            success = true;",
					"        });",
					"",
					"        // These cannot be tested if the transaction is not routed by IZGW (e.g., is the mock IIS), or does not",
					"        // have a destination url (as in Connectivity Testing).  NOTE: destination.id could be known but",
					"        // not configured with a valid url, url could be known but if no connected, no other data available.",
					"        if (entry?.transactionData?.serviceType == \"Gateway\" && entry?.transactionData?.destination?.connected != false) {",
					"            _test('Log Entry['+index+'] to contain transactionData.destination.ipAddress ' + IPADDR, function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.destination.ipAddress');",
					"                pm.expect(entry.transactionData.destination.ipAddress).to.match(IPADDR);",
					"                pm.expect(entry).to.have.nested.property('transactionData.destination.host');",
					"                pm.expect(entry.transactionData.destination.host).to.match(DNS_NAME);",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain transactionData.destination.serialNumber matching ' + POSITIVE_NUMBER, function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.destination.serialNumber');",
					"                pm.expect(entry.transactionData.destination.serialNumber).to.match(POSITIVE_NUMBER);",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain transactionData.destination.organization', function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.destination.organization');",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain transactionData.destination.commonName matching ' + COMMON_NAME, function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.destination.commonName');",
					"                pm.expect(entry.transactionData.destination.commonName).to.match(COMMON_NAME);",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+']to contain transactionData.destination.validFrom matching ' + TIMESTAMP, function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.destination.validFrom');",
					"                pm.expect(entry.transactionData.destination.validFrom).to.match(TIMESTAMP);",
					"                success = true;",
					"            });",
					"            _test('Log Entry['+index+'] to contain transactionData.destination.validTo matching ' + TIMESTAMP, function () {",
					"                pm.expect(entry).to.have.nested.property('transactionData.destination.validTo');",
					"                pm.expect(entry.transactionData.destination.validTo).to.match(TIMESTAMP);",
					"                success = true;",
					"            });        ",
					"        }",
					"    }",
					"    if (entry?.ssl_trust !== undefined) {",
					"        _test('Log Entry['+index+'] to contain ssl_trust.auth_type', function () {",
					"            pm.expect(entry).to.have.nested.property('ssl_trust.authType');",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain ssl_trust.certificates', function () {",
					"            pm.expect(entry).to.have.nested.property('ssl_trust.certificates');",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain ssl_trust.location', function () {",
					"            pm.expect(entry).to.have.nested.property('ssl_trust.location');",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain ssl_trust.pathCertificates', function () {",
					"            pm.expect(entry).to.have.nested.property('ssl_trust.pathCertificates');",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain ssl_trust.trust_anchor_certificate', function () {",
					"            pm.expect(entry).to.have.nested.property('ssl_trust.trustAnchorCertificate');",
					"            success = true;",
					"        });",
					"        _test('Log Entry['+index+'] to contain ssl_trust.trusted matching true|false', function () {",
					"            pm.expect(entry).to.have.nested.property('ssl_trust.trusted');",
					"            pm.expect(entry.ssl_trust.trusted).to.match(BOOLEAN);",
					"            success = true;",
					"        });",
					"    }",
					"    if (failed) {",
					"        console.log(\"Log Entry[\"+index+\"]:\", entry);",
					"    }",
					"}",
					"",
					"function json2xmlX(j, holder, i) {",
					"    var indent = (i === undefined) ? -1 : i;",
					"    var x = \"\";",
					"    for (var k in j) {",
					"        var needsEndTag = false;",
					"        if (k == \"$\" || k == \"_\") {",
					"            continue;",
					"        }",
					"        var stripParent = false;",
					"        var stripChildren = false;",
					"        var needsEndTag = false;",
					"        var hasChildren = false;",
					"        var output = null;",
					"        if (--holder.n == 0) {",
					"            stripParent = true;",
					"            holder.removed = k;",
					"        } else if (--holder.n == 0) {",
					"            stripParent = true;",
					"            stripChildren = true;",
					"            holder.removed = k + \"+\";",
					"        }",
					"        if (typeof(j[k]) == \"object\" || typeof(j[k] == \"string\")) {",
					"            output = \"\";",
					"            if (indent >= 0) {",
					"                output += \"\\n\";",
					"                output += \"                                      \".substring(0, indent);",
					"            }",
					"            output += \"<\" + k;",
					"            for (a in j[k].$) {",
					"                var output2 = \" \" + a + \"=\\\"\" + j[k].$[a] + \"\\\"\";",
					"                if (--holder.n != 0) {",
					"                    output += output2;",
					"                } else {",
					"                    holder.removed = output2;",
					"                }",
					"            }",
					"            output += \">\";",
					"            if (!stripParent) {",
					"                x += output;",
					"            } else {",
					"                holder.removed = output;",
					"            }",
					"            needsEndTag = true;",
					"        }",
					"        if (j[k]._ !== undefined) {",
					"            output = j[k]._;",
					"        } else if (typeof(j[k]) == \"string\") {",
					"            output = j[k];",
					"        } else {",
					"            output = \"\";",
					"        }",
					"        if (typeof(j[k]) == \"object\") {",
					"            var s = json2xmlX(j[k], holder, indent >= 0 ? indent + 2 : indent);",
					"            output += s;",
					"            hasChildren = s.length > 0;",
					"        }",
					"        if (!stripChildren) {",
					"            x += output;",
					"        } else {",
					"            holder.removed += output;",
					"        }",
					"        if ((typeof(j[k]) == \"object\" || typeof(j[k]) == \"string\") && !stripParent && needsEndTag) {",
					"            output = \"\";",
					"            if (indent >= 0 && hasChildren) {",
					"                output += \"\\n\" + \"                                      \".substring(0, indent);",
					"            }",
					"            output += \"</\" + k + \">\";",
					"            if (stripParent) {",
					"                holder.removed += ouput;",
					"            } else {",
					"                x += output;",
					"            }",
					"        }",
					"    }",
					"    return x;",
					"}",
					"const EmptyResponse = {",
					"    body: \"[]\",",
					"    json: function() {",
					"        return new Array(0);",
					"    }",
					"}",
					"",
					"const Utils = {",
					"    json2xml: function (j, n, i) {",
					"        var holder = new Object();",
					"        if (n === undefined || n === null) {",
					"            holder.n = -1;",
					"        } else if (typeof(n) == \"object\") {",
					"            holder = n;",
					"        } else {",
					"            holder.n = n;",
					"        }",
					"        s = json2xmlX(j, holder, i);",
					"        if (!(\"removed\" in holder)) {",
					"            holder.removed = false;",
					"        }",
					"        return s;",
					"    },",
					"    setup: function (pm, dest) {",
					"        pm.environment.set(\"ts\", pm.variables.replaceIn('{{$isoTimestamp}}').replace(/[\\-:T]/g, \"\"));",
					"        pm.environment.set(\"testMessageId\", pm.info.requestName.split(\" \")[0]);",
					"        var x = setTimeout(() => { }, 500);",
					"        async function doResetLogs() {",
					"            await utils.resetLogs(pm, dest).catch(err => { console.log(\"Error in setup:\", err); });",
					"        };",
					"        doResetLogs();",
					"",
					"        clearTimeout(x);",
					"    },",
					"    removeNS: function (obj) {",
					"        for (name in obj) {",
					"            if (name == \"$\") {",
					"                continue;",
					"            }",
					"            if (name.includes(\":\")) {",
					"                var newName = name.split(\":\")[1];",
					"                obj[newName] = obj[name];",
					"                delete obj[name];",
					"            }",
					"            utils.removeNS(obj[newName]);",
					"        }",
					"        return obj;",
					"    },",
					"    resetLogs: function (pm, dest) {",
					"        setTimeout(() => { }, 500);",
					"        var theUrl = pm.environment.get(\"protocol\") + '://' + pm.environment.get(\"host\") + \":\" + pm.environment.get(\"port\") + '/rest/logs';",
					"        if (dest !== null && dest !== undefined) {",
					"            theUrl = theUrl + \"?clear=\" + dest;",
					"        }",
					"        const resetLogRequest = {",
					"            url: theUrl,",
					"            method: 'DELETE',",
					"            certificate: pm.request.certificate",
					"        };",
					"",
					"        const reset = async () => {",
					"            const foo = this.reqPromise(pm, resetLogRequest);",
					"            const data = await foo.catch(err => { console.log(\"Error in resetLogs:\", err); });",
					"            return data;",
					"        };",
					"        return reset().then();",
					"    },",
					"    reqPromise: function (pm, urlPath) {",
					"        return new Promise((resolve, reject) => {",
					"            pm.sendRequest(urlPath, function (err, response) {",
					"                if (err) reject(err);",
					"                resolve(response);",
					"            });",
					"        });",
					"    },",
					"",
					"    isDeployed: function (pm) {",
					"        return pm.environment.get(\"host\").endsWith(\".phiz-project.org\") || \"true\" == pm.environment.get(\"skipLogs\");",
					"    },",
					"",
					"    getLogs: async function (search, pm) {",
					"        var done = false;",
					"        if (this.isDeployed(pm)) {",
					"            pm.test(\"Log Testing disabled for deployed environments\", function () {",
					"                pm.expect(true).to.be.eql(true);",
					"            });",
					"            return new Array();",
					"        }",
					"        const searchLogRequest = {",
					"            url: pm.environment.get(\"protocol\") + '://' + pm.environment.get(\"host\") + \":\" + pm.environment.get(\"port\") + '/rest/logs' + (search != null ? '?search=' + search : ''),",
					"            method: 'GET',",
					"            certificate: pm.request.certificate",
					"        }",
					"",
					"        const getStuff = async () => {",
					"            const foo = this.reqPromise(pm, searchLogRequest);",
					"            const data = await foo.catch(err => { ",
					"                console.log(\"Error in getLogs:\", err); ",
					"                pm.test(\"Logs have data\", function() {",
					"                    pm.expect(err).eql(null);",
					"                });",
					"                return Object.create(EmptyResponse);",
					"            });",
					"            return data;",
					"        }",
					"        return getStuff();",
					"    },",
					"",
					"    getStatus: async function (search, pm, history) {",
					"        var done = false;",
					"        if (this.isDeployed(pm)) {",
					"            pm.test(\"Log Testing disabled for deployed environments\", function () {",
					"                pm.expect(true).to.be.eql(true);",
					"            });",
					"            return new Array();",
					"        }",
					"        const getStatusRequest = {",
					"            url: pm.environment.get(\"protocol\") + '://'  + pm.environment.get(\"host\") + \":\" + pm.environment.get(\"port\") + (history ? '/rest/statushistory/dev' :  '/rest/status/dev'),",
					"            method: 'GET',",
					"            certificate: pm.request.certificate",
					"        }",
					"",
					"        const getStatusResult = async () => {",
					"            console.log(\"Request: \", getStatusRequest);",
					"            const foo = this.reqPromise(pm, getStatusRequest);",
					"            const data = await foo.catch(err => { ",
					"                console.log(\"Error in getStatus:\", err); ",
					"                return new Array();",
					"            });",
					"            return data;",
					"        }",
					"        return getStatusResult();",
					"    },",
					"",
					"    getKey: function (logs, key1, key2) {",
					"        var result = new Array();",
					"        for (log of logs) {",
					"            if (key1 in log) {",
					"                result.add(log);",
					"            } ",
					"            if (key2 !== undefined && key2 in log) {",
					"                result.add(log);",
					"            }",
					"        }",
					"        return result;",
					"",
					"    },",
					"    getTxData: function (logs, all) {",
					"        // If all = true, do NOT filter background status checks from txData.",
					"        if (all === undefined) {",
					"            all = false;",
					"        }",
					"        data = this.getKey(logs, \"transactionData\");",
					"        if (all) return data;",
					"        var newData = new Array();",
					"        for (a of data) {",
					"            if (a.transactionData === undefined) continue;",
					"            if (parseInt(a.eventId.split('.')[1]) > 2) newData.add(a);",
					"        }",
					"        return newData;",
					"    },",
					"    getWsRequest: function (logs) {",
					"        // Handle 1.x style for comparing test results, and check for 2.x style for getting them",
					"        var v1Result = this.getKey(logs, \"ws_request_message\");",
					"        var logs = this.getTxData(logs);",
					"        var v2Refined = new Array();",
					"        for (l in logs) {",
					"            if (\"serverRequest\" in logs[l]?.transactionData) {",
					"                var serverRequest = logs[l]?.transactionData?.serverRequest;",
					"                if (serverRequest != null && serverRequest?.ws_request_message != null) {",
					"                    newObject = { \"ws_request_message\": serverRequest?.ws_request_message };",
					"                    v2Refined.add(newObject);",
					"                }",
					"            }",
					"            if (\"clientRequest\" in logs[l]?.transactionData) {",
					"                var clientRequest = logs[l]?.transactionData.clientRequest;",
					"                if (clientRequest != null && clientRequest?.ws_request_message != null) {",
					"                    newObject = { \"ws_request_message\": clientRequest?.ws_request_message };",
					"                    v2Refined.add(newObject);",
					"                }",
					"            }",
					"        }",
					"        return v1Result.concat(v2Refined);",
					"    },",
					"    getWsResponse: function (logs) {",
					"        var v1Result = this.getKey(logs, \"ws_response_message\");",
					"        var logs = this.getTxData(logs);",
					"        var v2Refined = new Array();",
					"        for (l in logs) {",
					"            if (\"serverResponse\" in logs[l]?.transactionData) {",
					"                var serverResponse = logs[l]?.transactionData?.serverResponse;",
					"                if (serverResponse != null && serverResponse?.ws_response_message != null) {",
					"                    newObject = { \"ws_response_message\": serverResponse?.ws_response_message };",
					"                    v2Refined.add(newObject);",
					"                }",
					"            }",
					"            if (\"clientResponse\" in logs[l]?.transactionData) {",
					"                var clientResponse = logs[l]?.transactionData?.clientResponse;",
					"                if (clientResponse != null && clientResponse?.ws_response_message != null) {",
					"                    newObject = { \"ws_response_message\": clientResponse?.ws_response_message };",
					"                    v2Refined.add(newObject);",
					"                }",
					"            }",
					"        }",
					"        return v1Result.concat(v2Refined);",
					"    },",
					"    testSLA: function (pm, duration) {",
					"        if (this.isDeployed(pm)) {",
					"            pm.test(\"SLA Testing disabled for deployed environments\", function () {",
					"                pm.expect(true).to.be.eql(true);",
					"            });",
					"            return;",
					"        } ",
					"        pm.test(\"SLA(\" + pm.response.responseTime + \" ms) < \" + duration + \" ms\", function() {",
					"            pm.expect(pm.response.responseTime).to.be.below(duration);",
					"        });",
					"    },",
					"    testTxSLA: function(pm, txData, duration) {",
					"        txData = this.getTxData(txData, true);  // Ensure only txData is checked",
					"        if (this.isDeployed(pm)) {",
					"            pm.test(\"SLA Testing disabled for deployed environments\", function () {",
					"                pm.expect(true).to.be.eql(true);",
					"            });",
					"            return;",
					"        }",
					"        var counter = 0;",
					"        pm.test(\"transactionData exists in Logs\"), function() {",
					"            pm.expect(txData).to.not.be.eql(null);",
					"            pm.expect(txData.length).to.be.above(0);",
					"        }",
					"        if (txData != null && txData.length > 0) {",
					"            pm.test(\"Transaction \" + (txData.length - 1) + \" SLA(\" + txData[txData.length - 1].transactionData?.elapsedTimeProcessing + \" ms) < \" + duration + \" ms\", ",
					"                function() {",
					"                    pm.expect(txData[txData.length - 1]?.transactionData?.elapsedTimeProcessing).to.be.below(duration);",
					"                }",
					"            );",
					"        }",
					"    },",
					"    getFirstTxEntry: function (txData) {",
					"        // Find the first entry of interest for fault testing and return it.",
					"        // This is needed because there may be some txData entries that are",
					"        // generated by background processes and these can be filtered out.",
					"        for (entry of txData) {",
					"            // Do not test faults in transactionData elements for mock.",
					"            if (entry?.transactionData?.serviceType == \"Mock\") continue;",
					"            // Do not test internal calls for connectivity tests",
					"            if (entry?.method == \"INTERNAL\") continue;",
					"            if (parseInt(entry?.eventId?.split('.')[1]) < 3) continue;",
					"            return entry;",
					"        }",
					"        return null;",
					"    },",
					"    hl7Terser: function (hl7Message, desiredSegment, fieldIndex, componentIndex) {",
					"",
					"        const fieldDelimiter = hl7Message[3];",
					"        const componentDelimiter = hl7Message[4];",
					"",
					"        const segments = hl7Message.split(\"\\r\");",
					"",
					"        const segment = segments.find((segment) =>",
					"            segment.startsWith(desiredSegment)",
					"        );",
					"",
					"        if (segment) {",
					"            const fields = segment.split(fieldDelimiter);",
					"",
					"            if (desiredSegment !== \"MSH\") {",
					"            fields.shift();",
					"            }",
					"",
					"            const field = fields[fieldIndex - 1];",
					"",
					"            if (field) {",
					"            const components = field.split(componentDelimiter);",
					"",
					"            return components[componentIndex - 1];",
					"            }",
					"        }",
					"",
					"        return \"\";",
					"",
					"    },",
					"    testFault: function(pm, txData, fault, summary, retry) {",
					"        var entry = this.getFirstTxEntry(txData);",
					"        if (entry == null) {",
					"            return;",
					"        }",
					"        pm.test(\"transactionData.faultName == \" + fault, function() {",
					"            pm.expect(entry?.transactionData?.faultName).to.be.eql(fault);",
					"        });",
					"        pm.test(\"transactionData.hasProcessError == true\", function() {",
					"            pm.expect(entry?.transactionData?.hasProcessError).to.be.eql(true);",
					"        });",
					"        pm.test(\"transactionData.processError != null\", function() {",
					"            pm.expect(entry?.transactionData?.processError).to.not.be.eql(null);",
					"        });",
					"        pm.test(\"transactionData.processErrorSummary ~ \" + summary, function() {",
					"            pm.expect(entry?.transactionData?.processErrorSummary.replace(/\\s+/g,\"\")).to.eql(summary);",
					"        });",
					"    },",
					"    testLogs: function (logs, pm, duration, fault, summary, retry) {",
					"        var logTestingCompleted = false;",
					"        var count = 0;",
					"        if (this.isDeployed(pm)) {",
					"            return;",
					"        }",
					"        var txData = this.getTxData(logs);",
					"        if (duration !== undefined && duration > 0) {",
					"            this.testTxSLA(pm, txData, duration);",
					"        }",
					"        if (fault !== undefined) {",
					"            this.testFault(pm, txData, fault, summary, retry);",
					"        }",
					"        if(env !== \"test\"){",
					"        try {",
					"            for (entry of logs) {",
					"                testLogEntry(entry, pm, count++);",
					"            }",
					"            for (entry of txData) {",
					"                pm.test(\"Check Service Type\", function() {",
					"                    pm.expect(entry.transactionData.serviceType).to.match(/Mock|Gateway/);",
					"                    if (entry.requestUri == \"/IISHubService\" || entry.requestUri.includes(\"/rest/\")) {",
					"                        pm.expect(entry.transactionData.serviceType).to.eql(\"Gateway\");",
					"                    } else {",
					"                        pm.expect(entry.transactionData.serviceType).to.eql(\"Mock\");",
					"                    }",
					"                });",
					"            }",
					"            logTestingCompleted = true;",
					"        } catch (error) {",
					"            pm.test(\"Testing log entry \" + (count + 1) + \" of \" + logs.length, function () {",
					"                pm.expect(error, error.message).to.be.eql(null);",
					"            });",
					"        }",
					"        pm.test(\"Tested \" + logs.length + \" log entries\", function () {",
					"            pm.expect(count).to.be.eql(logs.length);",
					"            pm.expect(logTestingCompleted).to.be.eql(true, \"Log Testing Completed\");",
					"        });",
					"        return count;",
					"    }",
					"}",
					"}",
					"",
					"utils = Object.create(Utils);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "GoodMessage",
			"value": "MSH|^~\\&amp;|IRIS IIS|IRIS|TEST|TC_04|20210402091512.000-0100||QBP^Q11^QBP_Q11|20210330093013AZQ231|P|2.5.1|||ER|AL|||||Z34^CDCPHINVS|SIISCLIENT28374|\nQPD|Z34^Request Immunization History^CDCPHINVS|20210330093013LA231|LAMASM77BF4BA6^^^IZGATEWAYTEST&amp;2.16.840.1.113883.40.1&amp;ISO^MR|Johnson^James^Andrew^^^^L|Leung^Jen^^^^^M|20160414|M|Main Street&amp;&amp;123^^New Orleans^LA^70115^^L|^PRN^PH^^^555^5551111|Y|1",
			"type": "string"
		},
		{
			"key": "GoodResponse",
			"value": ""
		},
		{
			"key": "GoodResponseLF",
			"value": ""
		},
		{
			"key": "GoodResponseCRLF",
			"value": ""
		},
		{
			"key": "GoodMessageLF",
			"value": ""
		},
		{
			"key": "GoodMessageCRLF",
			"value": ""
		},
		{
			"key": "TooLargeMessage",
			"value": ""
		},
		{
			"key": "IisTooLargeMessage",
			"value": ""
		},
		{
			"key": "hex0b",
			"value": ""
		},
		{
			"key": "hex1b",
			"value": ""
		},
		{
			"key": "myIpAddr",
			"value": ""
		},
		{
			"key": "azure-endpoint",
			"value": "azurite",
			"type": "string"
		},
		{
			"key": "dex-endpoint",
			"value": "dex-dev",
			"type": "string"
		},
		{
			"key": "GoodMessageCRLFVXU",
			"value": "",
			"type": "string"
		},
		{
			"key": "GoodMessageQBP",
			"value": "MSH|^~\\&amp;|DE0000|DE0000|TEST|TEST|TEST||QBP^Q11^QBP_Q11|DE000020231031303563|P|2.5.1|||||||||Z34^CDCPHINVS\nQPD|Z34^Request Immunization History^CDCPHINVS|20210330093013MD231|112258-9^^^MD^MR|JohnsonIZG^JamesIZG^AlbertIZG^^^^L|PearsonIZG^SarahIZG^^^^^M|20160414|M|Main Street&amp;&amp;123^^Baltimore^MD^212021234^^L|^PRN^PH^^^555^5551111|Y|1\nRCP|I|10^RD&amp;Records&amp;HL70126",
			"type": "string"
		}
	]
}