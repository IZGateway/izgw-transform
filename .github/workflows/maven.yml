name: Java CI with Maven

on:
  pull_request:
    branches:
      - develop
      - Release*
      - main

  push:
    branches:
      - develop
      - Release*
      - main
      - IGDD-1788_APHL_Image_Push

  # TODO remove IGDD-1788 from above list.... and everywhere
  # What about IZGW_ALL_REPO_ACCESS_TOKEN (if my change worked)

# Ensure only one build changes dev environment at the same time
concurrency: dev

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the software
        uses: actions/checkout@v4
        with:
          ssh-key: ${{secrets.ACTIONS_KEY}}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "adopt"
          cache: maven

      - name: Check version format
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Version $VERSION is not in the correct format. It should be #.#.#"
            exit 1
          fi

      - name: Set up Maven
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: 3.9.0

      - name: Set up Toolchain
        shell: bash
        run: |
          echo BASE_TAG=`mvn help:evaluate -Dexpression=project.version -q -DforceStdout` >> $GITHUB_ENV
          echo COMPUTERNAME=`hostname` >> $GITHUB_ENV
          npm install -g newman-reporter-junitfull
          npm install -g xunit-viewer
          mkdir -p ~/.m2
          cat << EOF > ~/.m2/settings.xml
          <?xml version="1.0" encoding="UTF-8"?><settings><servers><server><id>github</id><username>${{ env.GITHUB_ACTOR }}</username><password>${{ secrets.AUSTIN_IZGW_ALL_REPO_ACCESS_TOKEN }}</password></server></servers></settings>
          EOF
          cat << EOF > ~/.m2/toolchains.xml
          <?xml version="1.0" encoding="UTF8"?>
          <toolchains>
            <toolchain>
              <type>jdk</type>
                <provides>
                  <version>11</version>
                  <vendor>sun</vendor>
                </provides>
                <configuration>
                  <jdkHome>$JAVA_HOME_11_X64</jdkHome>
                </configuration>
            </toolchain>            
            <toolchain>
              <type>jdk</type>
                <provides>
                  <version>17</version>
                  <vendor>sun</vendor>
                </provides>
                <configuration>
                  <jdkHome>$JAVA_HOME_17_X64</jdkHome>
                </configuration>
            </toolchain>            
          </toolchains>
          EOF

      - name: Output target branch
        run: |
          echo "github.event.pull_request.base.ref: ${{ github.event.pull_request.base.ref }}"
          echo "github.ref: ${{ github.ref }}"
          echo "github.event_name: ${{ github.event_name }}"

      - name: Set version for develop branch
        if: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/develop' ) || (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'develop') }}
        run: |
          echo "Setting the snapshot version"
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)-SNAPSHOT
          echo VERSION="${VERSION}" >> $GITHUB_ENV

      - name: Set version for release branch
        if: ${{ (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/IGDD-1788_APHL_Image_Push')) || (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/Release')) || (github.event_name == 'pull_request' && startsWith(github.event.pull_request.base.ref, 'Release') ) }}
        run: |
          echo "Setting the release candidate version"
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)-rc$(date +%Y%m%d%H%M)
          echo VERSION="${VERSION}" >> $GITHUB_ENV

      - name: Set version for main branch
        if: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main') }}
        run: |
          echo "Setting the release version"
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo VERSION="${VERSION}" >> $GITHUB_ENV

      - name: Set tags
        run: |
          IMAGE_TAG="${VERSION}-${{github.run_number}}"
          echo IMAGE_TAG="${IMAGE_TAG}"
          echo IMAGE_TAG="${IMAGE_TAG}" >> $GITHUB_ENV
          echo IMAGE_BRANCH_TAG="${VERSION}"
          echo IMAGE_BRANCH_TAG="${VERSION}" >> $GITHUB_ENV

      - name: Print all environment variables
        run: printenv

      - name: Sets check env vars
        run: |
          # default to force a revision check unless releasing
          echo DO_REVISION_CHECK=true >> $GITHUB_ENV
          # Skip dependency check
          echo SKIP_DEPENDENCY_CHECK=true >> $GITHUB_ENV


      - name: Maven Install
        env:
          COMMON_PASS: ${{ secrets.COMMON_PASS }}
          ELASTIC_API_KEY: ${{ secrets.ELASTIC_API_KEY }}
          SSL_SHARE: ${{ github.workspace }}/target

        run: |
          env && mvn -B clean package install -Dbuildno=${{github.run_number}} \
              -DdoRevisionCheck=${{env.DO_REVISION_CHECK}} \
              -DskipDependencyCheck=${{env.SKIP_DEPENDENCY_CHECK}} \
              -Dimage.tag=$IMAGE_BRANCH_TAG

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: transformation-service
        run: |
          docker image tag izgw-transform:${{env.IMAGE_TAG}} $ECR_REGISTRY/$ECR_REPOSITORY:${{env.IMAGE_TAG}}
          docker image tag izgw-transform:${{env.IMAGE_TAG}} $ECR_REGISTRY/$ECR_REPOSITORY:${{env.IMAGE_BRANCH_TAG}}
          docker image tag izgw-transform:${{env.IMAGE_TAG}} $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker image push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY

      - name: Update ECS service to force new deployment of latest image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: transformation-service
        run: |
          aws ecs update-service --cluster izgateway-dev-izgateway-services --service izgw-xform-dev --force-new-deployment --enable-execute-command --desired-count 1 | jq ".service.deployments[].id"

      - name: Login to GitHub Repository
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag, push and deploy image to Github Repository
        if: github.ref == 'refs/heads/main'
        run: |
          docker image tag izgw-transform:${{env.IMAGE_TAG}} ghcr.io/izgateway/izgw-transform:${{env.IMAGE_TAG}}
          docker image tag izgw-transform:${{env.IMAGE_TAG}} ghcr.io/izgateway/izgw-transform:${{env.IMAGE_BRANCH_TAG}}
          docker image tag izgw-transform:${{env.IMAGE_TAG}} ghcr.io/izgateway/izgw-transform:latest
          docker image push --all-tags ghcr.io/izgateway/izgw-transform

      - name: Configure AWS credentials for APHL
        if: (github.event_name == 'push' && (startsWith(github.ref, 'refs/heads/Release') || github.ref == 'refs/heads/IGDD-1788_APHL_Image_Push'))
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AUSTIN_APHL_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AUSTIN_APHL_AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AUSTIN_APHL_AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Login to APHL Amazon ECR
        if: ${{ (github.event_name == 'push' && (startsWith(github.ref, 'refs/heads/Release') || github.ref == 'refs/heads/IGDD-1788_APHL_Image_Push')) }}
        id: login-aphl-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag and push image to APHL Amazon ECR
        if: ${{ (github.event_name == 'push' && (startsWith(github.ref, 'refs/heads/Release') || github.ref == 'refs/heads/IGDD-1788_APHL_Image_Push')) }}
        env:
          ECR_REGISTRY: ${{ secrets.APHL_ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.APHL_ECR_REPOSITORY }}
        run: |
          docker image tag izgw-transform:${{env.IMAGE_TAG}} $ECR_REGISTRY/$ECR_REPOSITORY:${{env.IMAGE_TAG}}
          docker image tag izgw-transform:${{env.IMAGE_TAG}} $ECR_REGISTRY/$ECR_REPOSITORY:${{env.IMAGE_BRANCH_TAG}}
          docker image tag izgw-transform:${{env.IMAGE_TAG}} $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker image push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY
