name: Java CI with Maven

on:
  push:
    branches:
      - Release*

  pull_request:
    branches:
      - Release*
      - main

# Ensure only one build changes dev environment at the same time
concurrency: dev

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the software
        uses: actions/checkout@v4
        with:
          ssh-key: ${{secrets.ACTIONS_KEY}}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "adopt"
          cache: maven

      - name: Set up Maven
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: 3.9.0

      - name: Set up Toolchain
        shell: bash
        run: |
          echo BASE_TAG=`mvn help:evaluate -Dexpression=project.version -q -DforceStdout` >> $GITHUB_ENV
          echo COMPUTERNAME=`hostname` >> $GITHUB_ENV
          npm install -g newman-reporter-junitfull
          npm install -g xunit-viewer
          mkdir -p ~/.m2
          cat << EOF > ~/.m2/settings.xml
          <?xml version="1.0" encoding="UTF-8"?><settings><servers><server><id>github</id><username>austinmoody</username><password>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</password></server></servers></settings>
          EOF
          cat << EOF > ~/.m2/toolchains.xml
          <?xml version="1.0" encoding="UTF8"?>
          <toolchains>
            <toolchain>
              <type>jdk</type>
                <provides>
                  <version>11</version>
                  <vendor>sun</vendor>
                </provides>
                <configuration>
                  <jdkHome>$JAVA_HOME_11_X64</jdkHome>
                </configuration>
            </toolchain>            
            <toolchain>
              <type>jdk</type>
                <provides>
                  <version>17</version>
                  <vendor>sun</vendor>
                </provides>
                <configuration>
                  <jdkHome>$JAVA_HOME_17_X64</jdkHome>
                </configuration>
            </toolchain>            
          </toolchains>
          EOF

      - name: Sets env vars for push or pull request to release branch (default behavior)
        run: |
          echo IMAGE_TAG=`mvn help:evaluate -Dexpression=project.version -q -DforceStdout | sed "s/-SNAPSHOT$/-SNAPSHOT-${{github.run_number}}/"` >> $GITHUB_ENV
          echo IMAGE_BRANCH_TAG=`mvn help:evaluate -Dexpression=project.version -q -DforceStdout` >> $GITHUB_ENV
          # default to force a revision check unless releasing
          echo DO_REVISION_CHECK=true >> $GITHUB_ENV
          # Skip dependency check
          echo SKIP_DEPENDENCY_CHECK=true >> $GITHUB_ENV

      - name: Print all environment variables
        run: printenv

      - name: Maven Install
        env:
          COMMON_PASS: ${{ secrets.COMMON_PASS }}
          ELASTIC_API_KEY: ${{ secrets.ELASTIC_API_KEY }}

        run: |
          env && mvn -B clean package install -Dbuildno=${{github.run_number}} \
              -DdoRevisionCheck=${{env.DO_REVISION_CHECK}} \
              -DskipDependencyCheck=${{env.SKIP_DEPENDENCY_CHECK}} \
              -Dimage.tag=$IMAGE_BRANCH_TAG

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: transformation-service
        run: |
          docker image tag izgw-transform:${{env.IMAGE_TAG}} $ECR_REGISTRY/$ECR_REPOSITORY:${{env.IMAGE_TAG}}
          docker image tag izgw-transform:${{env.IMAGE_TAG}} $ECR_REGISTRY/$ECR_REPOSITORY:${{env.IMAGE_BRANCH_TAG}}
          docker image tag izgw-transform:${{env.IMAGE_TAG}} $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker image push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY

      - name: Update ECS service to force new deployment of latest image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: transformation-service
        run: |
          aws ecs update-service --cluster izgateway-dev-izgateway-services --service izgateway-transformation-service --force-new-deployment --enable-execute-command --desired-count 1 | jq ".service.deployments[].id"

      - name: Login to GitHub Repository
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag, push and deploy image to Github Repository
        run: |
          docker image tag izgw-transform:${{env.IMAGE_TAG}} ghcr.io/izgateway/izgw-transform:${{env.IMAGE_TAG}}
          docker image tag izgw-transform:${{env.IMAGE_TAG}} ghcr.io/izgateway/izgw-transform:${{env.IMAGE_BRANCH_TAG}}
          docker image tag izgw-transform:${{env.IMAGE_TAG}} ghcr.io/izgateway/izgw-transform:latest
          docker image push --all-tags ghcr.io/izgateway/izgw-transform

# More to come...
